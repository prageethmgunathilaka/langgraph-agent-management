name: 🚀 Production Deployment

on:
  # Manual trigger for production deployment
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Target Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - 'staging'
          - 'production'
      skip_quality_gate:
        description: 'Skip Quality Gate (Emergency Only)'
        required: false
        default: false
        type: boolean

  # Automatic deployment on release
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.13'

jobs:
  # Pre-deployment quality gate
  pre-deployment-quality:
    name: 🛡️ Pre-Deployment Quality Gate
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_quality_gate != 'true' }}
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install All Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety pytest-cov aiofiles

    - name: 🔒 Security Scan
      run: |
        echo "Running security scans..."
        bandit -r app/ -ll
        safety check

    - name: 🧪 Full Test Suite
      run: |
        echo "Running complete test suite..."
        python -m pytest tests/ -v --tb=short --cov=app --cov-report=term --cov-fail-under=70

    - name: 📊 Quality Metrics
      run: |
        echo "Checking code quality..."
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
        black --check .
        isort --check-only .

    - name: ✅ Quality Gate Passed
      run: |
        echo "🎉 All quality checks passed! Ready for deployment."

  # Build and test
  build:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: [pre-deployment-quality]
    if: always() && (needs.pre-deployment-quality.result == 'success' || github.event.inputs.skip_quality_gate == 'true')
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🏷️ Determine Version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Deploying version: $VERSION"

    - name: 🏗️ Build Application
      run: |
        echo "Building application..."
        # Add any build steps here
        echo "Build completed successfully"

    - name: 🧪 Smoke Tests
      run: |
        echo "Running smoke tests..."
        python run_server.py &
        SERVER_PID=$!
        sleep 10
        
        # Basic health check
        curl -f http://localhost:8000/health || exit 1
        
        kill $SERVER_PID
        echo "Smoke tests passed"

  # Deploy to staging first
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    environment: staging
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Staging
      run: |
        echo "Deploying version ${{ needs.build.outputs.version }} to staging..."
        # Add your staging deployment commands here
        # For example, if using AWS Lambda:
        # aws lambda update-function-code --function-name langgraph-staging --zip-file fileb://deployment.zip
        echo "Staging deployment completed"

    - name: 🧪 Staging Health Check
      run: |
        echo "Running staging health checks..."
        # Add staging health check commands
        echo "Staging is healthy"

  # Deploy to production (only if staging succeeds)
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    environment: production
    if: ${{ github.event.inputs.environment == 'production' || github.event_name == 'release' }}
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4

    - name: 🏭 Deploy to Production
      run: |
        echo "Deploying version ${{ needs.build.outputs.version }} to production..."
        # Add your production deployment commands here
        # For example, if using AWS Lambda:
        # aws lambda update-function-code --function-name langgraph-prod --zip-file fileb://deployment.zip
        echo "Production deployment completed"

    - name: 🩺 Production Health Check
      run: |
        echo "Running production health checks..."
        # Add production health check commands
        echo "Production is healthy"

    - name: 📊 Deployment Summary
      run: |
        echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Successfully Deployed" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed At:** $(date -u)" >> $GITHUB_STEP_SUMMARY

  # Post-deployment monitoring
  post-deployment:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
    - name: 📊 Monitor Deployment
      run: |
        echo "Starting post-deployment monitoring..."
        # Add monitoring commands here
        # For example, check metrics, logs, etc.
        sleep 60  # Wait for 1 minute
        echo "Initial monitoring completed - all systems normal"

    - name: 🎉 Deployment Success
      run: |
        echo "🎉 Production deployment successful!"
        echo "Version ${{ needs.build.outputs.version }} is now live in production." 